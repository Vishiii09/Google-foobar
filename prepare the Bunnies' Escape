visitAndEnqueue(x, y, w, visited, queue, map):
    if 0 <= x < len(map) and 0 <= y < len(map[0]) and w - map[x][y] >= 0:
        if visited[x][y] == -1:
            visited[x][y] = w - map[x][y]
            queue.append([x, y, w - map[x][y]])
        elif visited[x][y] == 0:
            if w - map[x][y] == 1:
                visited[x][y] = 1
                queue.append([x, y, 1])


def solution(map):
    queue = [[0, 0, 1]]
    step = 1
    r = len(map)
    c = len(map[0])
    visited = [[-1 for x in range(c)] for y in range(r)]
    #-1 for unvisited
    #0 for visited but can't remove a wall any more
    #1 for visited and can still remove a wall
    visited[0][0] = 1
    des = [r - 1, c - 1]
    
    while queue:
        for i in range(len(queue)):
            v = queue.pop(0)
            if v[0] == des[0] and v[1] == des[1]:
                return step
            visitAndEnqueue(v[0] - 1, v[1], v[2], visited, queue, map)
            visitAndEnqueue(v[0] + 1, v[1], v[2], visited, queue, map)
            visitAndEnqueue(v[0], v[1] - 1, v[2], visited, queue, map)
            visitAndEnqueue(v[0], v[1] + 1, v[2], visited, queue, map)
        step += 1

